=================Shell Scripting Tutorial=============

A shell script is a computer program designed to be run by the Unix/Linux shell which could be one of the following:

    The Bourne Shell
    The C Shell
    The Korn Shell
    The GNU Bourne-Again Shell

    Note : To execute shell(.sh) file just do : ./filename.sh,
    #!/bin/sh
    It's called a shebang because the # symbol is called a hash, and the ! symbol is called a bang.

    Note: to make the .sh script file executable use following command:
    $ chmod +x filename.sh
    eg. chmod +x demo3_sh_cmds.sh


A) Variable Names
    The name of a variable can contain only letters (a to z or A to Z), numbers ( 0 to 9)
    or the underscore character ( _).
    By convention, Unix shell variables will have their names in UPPERCASE.
    The following examples are valid variable names −

    _ALI
    TOKEN_A
    VAR_1
    VAR_2

    i) Defining variable:
    variable_name=variable_value
    eg.Name="Bhoj"

    ii) Accessing Values
    To access the value stored in a variable, prefix its name with the dollar sign ($) −
    e.g echo $Name

    iii) Read-only variable
    Shell provides a way to mark variables as read-only by using the read-only command.

    NAME="Bhoj"
    readonly NAME
    NAME="SOMEONE"

    iv) Unsetting Variables
    syntax:
    unset variable_name
    Unsetting or deleting a variable directs the shell to remove the variable from the list of variables that it tracks.

    eg. MASTER="Bhoj"
        unset MASTER
        echo $MASTER  => no output 


==========Unix / Linux - Special Variables==========
    special variables that you can use in your shell scripts 


    $0     The filename of the current script.

    $n      These variables correspond to the arguments with which a script was invoked. Here n 
            is a positive decimal number corresponding to the position of an argument
            (the first argument is $1, the second argument is $2, and so on).
    
    $#      The number of arguments supplied to a script.

    $*      All the arguments are double quoted. If a script receives two arguments, $* is equivalent to $1 $2.

    $@      All the arguments are individually double quoted. If a script receives two arguments, $@ is 
            equivalent to $1 $2.
    
    $?      The exit status of the last command executed.

    $$      The process number of the current shell. For shell scripts, this is the process ID under
            which they are executing.

    $!      The process number of the last background command.

    # Exit Status

    The $? variable represents the exit status of the previous command.
    Exit status is a numerical value returned by every command upon its completion. 
    As a rule, most commands return an exit status of 0 if they were successful, and 1 if they were unsuccessful